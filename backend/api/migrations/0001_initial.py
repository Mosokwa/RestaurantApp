# Generated by Django 5.2.6 on 2025-10-08 14:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('cart_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'carts',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('cuisine_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'cuisines',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemModifier',
            fields=[
                ('item_modifier_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_available', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'item_modifiers',
                'ordering': ['modifier_group', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ItemModifierGroup',
            fields=[
                ('modifier_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_required', models.BooleanField(default=False)),
                ('min_selections', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_selections', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'item_modifier_groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('display_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('display_color', models.CharField(default='#FF6B35', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'menu categories',
                'db_table': 'menu_categories',
                'ordering': ['restaurant', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MultiRestaurantLoyaltyProgram',
            fields=[
                ('program_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Multi-Restaurant Loyalty Program', max_length=100)),
                ('program_type', models.CharField(choices=[('global', 'Global Program - All Restaurants'), ('franchise', 'Franchise Program - Restaurant Groups'), ('independent', 'Independent Program - Single Restaurant')], default='global', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('default_points_per_dollar', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('global_signup_bonus_points', models.IntegerField(default=100)),
                ('global_referral_bonus_points', models.IntegerField(default=500)),
                ('bronze_min_points', models.IntegerField(default=0)),
                ('silver_min_points', models.IntegerField(default=1000)),
                ('gold_min_points', models.IntegerField(default=5000)),
                ('platinum_min_points', models.IntegerField(default=15000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'multi_restaurant_loyalty_programs',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('owner', 'Restaurant Owner'), ('staff', 'Restaurant Staff'), ('admin', 'Administrator')], default='customer', max_length=10)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number.')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('verification_code', models.CharField(blank=True, max_length=10, null=True)),
                ('verification_code_expires', models.DateTimeField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('social_auth_provider', models.CharField(blank=True, max_length=20, null=True)),
                ('social_auth_uid', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='USA', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'addresses',
                'indexes': [models.Index(fields=['city', 'state'], name='addresses_city_39f647_idx'), models.Index(fields=['postal_code'], name='addresses_postal__0e4029_idx')],
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('branch_id', models.AutoField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number.')])),
                ('operating_hours', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('is_main_branch', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.address')),
            ],
            options={
                'verbose_name_plural': 'branches',
                'db_table': 'branches',
                'ordering': ['restaurant', '-is_main_branch'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('cart_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='api.cart')),
            ],
            options={
                'db_table': 'cart_items',
                'ordering': ['cart', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('dietary_preferences', models.JSONField(blank=True, default=dict)),
                ('newsletter_subscribed', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_cuisines', models.ManyToManyField(blank=True, to='api.cuisine')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'customers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to='api.customer'),
        ),
        migrations.CreateModel(
            name='BulkOrder',
            fields=[
                ('bulk_order_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('corporate', 'Corporate Event'), ('catering', 'Catering'), ('party', 'Party/Group'), ('other', 'Other')], max_length=20)),
                ('event_name', models.CharField(max_length=255)),
                ('event_description', models.TextField(blank=True, null=True)),
                ('event_date', models.DateTimeField()),
                ('number_of_guests', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('contact_person', models.CharField(max_length=255)),
                ('contact_phone', models.CharField(max_length=20)),
                ('contact_email', models.EmailField(max_length=254)),
                ('setup_requirements', models.TextField(blank=True, null=True)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('estimated_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('final_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('inquiry', 'Inquiry'), ('quoted', 'Quoted'), ('confirmed', 'Confirmed'), ('preparing', 'Preparing'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='inquiry', max_length=20)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delivery_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_orders', to='api.address')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_orders', to='api.customer')),
            ],
            options={
                'db_table': 'bulk_orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupOrder',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name for this group order', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('share_code', models.CharField(max_length=20, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('allow_anyone_to_join', models.BooleanField(default=True)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('order_deadline', models.DateTimeField()),
                ('estimated_delivery_time', models.DateTimeField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_group_orders', to='api.customer')),
            ],
            options={
                'db_table': 'group_orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItemModifier',
            fields=[
                ('cart_item_modifier_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('cart_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='api.cartitem')),
                ('item_modifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_modifiers', to='api.itemmodifier')),
            ],
            options={
                'db_table': 'cart_item_modifiers',
                'ordering': ['cart_item', 'item_modifier'],
            },
        ),
        migrations.AddField(
            model_name='itemmodifier',
            name='modifier_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='api.itemmodifiergroup'),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('item_type', models.CharField(choices=[('main', 'Main Dish'), ('beverage', 'Beverage'), ('dessert', 'Dessert'), ('side', 'Side Dish'), ('combo', 'Combo Meal')], default='main', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='menu_items/')),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_gluten_free', models.BooleanField(default=False)),
                ('is_spicy', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('calories', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('preparation_time', models.IntegerField(default=15, help_text='Preparation time in minutes')),
                ('popularity_score', models.IntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='api.menucategory')),
            ],
            options={
                'db_table': 'menu_items',
                'ordering': ['category__display_order', 'display_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='cartitem',
            name='menu_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='api.menuitem'),
        ),
        migrations.CreateModel(
            name='BulkOrderItem',
            fields=[
                ('bulk_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('bulk_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.bulkorder')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_order_items', to='api.menuitem')),
            ],
            options={
                'db_table': 'bulk_order_items',
            },
        ),
        migrations.CreateModel(
            name='MenuItemModifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.menuitem')),
                ('modifier_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.itemmodifiergroup')),
            ],
            options={
                'db_table': 'menu_item_modifiers',
                'ordering': ['modifier_group__name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLoyalty',
            fields=[
                ('loyalty_id', models.AutoField(primary_key=True, serialize=False)),
                ('current_points', models.IntegerField(default=0)),
                ('lifetime_points', models.IntegerField(default=0)),
                ('tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20)),
                ('total_orders', models.IntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('restaurant_stats', models.JSONField(blank=True, default=dict, help_text='Statistics per restaurant: {restaurant_id: {orders: X, spent: Y, last_order: date}}')),
                ('referral_code', models.CharField(blank=True, max_length=20, unique=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('tier_updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_profile', to='api.customer')),
                ('referred_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals', to='api.customer')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='api.multirestaurantloyaltyprogram')),
            ],
            options={
                'verbose_name_plural': 'customer loyalties',
                'db_table': 'customer_loyalty',
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('preference_id', models.AutoField(primary_key=True, serialize=False)),
                ('enable_websocket', models.BooleanField(default=True)),
                ('enable_push', models.BooleanField(default=True)),
                ('enable_email', models.BooleanField(default=True)),
                ('enable_sms', models.BooleanField(default=False)),
                ('order_updates', models.BooleanField(default=True)),
                ('promotional_offers', models.BooleanField(default=True)),
                ('reservation_reminders', models.BooleanField(default=True)),
                ('review_responses', models.BooleanField(default=True)),
                ('system_announcements', models.BooleanField(default=True)),
                ('loyalty_updates', models.BooleanField(default=True)),
                ('delivery_updates', models.BooleanField(default=True)),
                ('security_alerts', models.BooleanField(default=True)),
                ('quiet_hours_enabled', models.BooleanField(default=False)),
                ('quiet_hours_start', models.TimeField(default='22:00')),
                ('quiet_hours_end', models.TimeField(default='08:00')),
                ('max_daily_notifications', models.IntegerField(default=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_preferences',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('order_type', models.CharField(choices=[('delivery', 'Delivery'), ('pickup', 'Pickup'), ('dine_in', 'Dine-in')], default='delivery', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('preparing', 'Preparing'), ('ready', 'Ready for Pickup'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('loyalty_points_earned', models.IntegerField(default=0, help_text='Points earned from this order')),
                ('loyalty_points_awarded', models.BooleanField(default=False, help_text='Whether loyalty points have been awarded')),
                ('loyalty_points_awarded_at', models.DateTimeField(blank=True, help_text='When loyalty points were awarded', null=True)),
                ('order_placed_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('preparation_started_at', models.DateTimeField(blank=True, null=True)),
                ('ready_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_delivery_time', models.DateTimeField(blank=True, null=True)),
                ('table_number', models.CharField(blank=True, max_length=20, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.branch')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.customer')),
                ('delivery_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivery_orders', to='api.address')),
                ('loyalty_program_used', models.ForeignKey(blank=True, help_text='Which loyalty program was used for this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='api.multirestaurantloyaltyprogram')),
            ],
            options={
                'db_table': 'orders',
                'ordering': ['-order_placed_at'],
            },
        ),
        migrations.CreateModel(
            name='OfferUsage',
            fields=[
                ('usage_id', models.AutoField(primary_key=True, serialize=False)),
                ('discount_applied', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_order_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('final_order_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_successful', models.BooleanField(default=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('redeemed_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer_usages', to='api.customer')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offer_usages', to='api.order')),
            ],
            options={
                'db_table': 'offer_usages',
                'ordering': ['-applied_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('order_status', 'Order Status Update'), ('promotional', 'Promotional Offer'), ('reservation', 'Reservation Reminder'), ('review_response', 'Review Response'), ('system', 'System Announcement'), ('loyalty', 'Loyalty Program'), ('delivery', 'Delivery Update'), ('security', 'Security Alert')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('image_url', models.URLField(blank=True, null=True)),
                ('action_url', models.CharField(blank=True, max_length=500, null=True)),
                ('action_text', models.CharField(blank=True, max_length=100, null=True)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_via_websocket', models.BooleanField(default=False)),
                ('sent_via_push', models.BooleanField(default=False)),
                ('sent_via_email', models.BooleanField(default=False)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.order')),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveOrderTracking',
            fields=[
                ('tracking_id', models.AutoField(primary_key=True, serialize=False)),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('location_updated_at', models.DateTimeField(blank=True, null=True)),
                ('delivery_person_name', models.CharField(blank=True, max_length=255, null=True)),
                ('delivery_person_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('estimated_preparation_completion', models.DateTimeField(blank=True, null=True)),
                ('estimated_delivery_completion', models.DateTimeField(blank=True, null=True)),
                ('preparation_progress', models.IntegerField(default=0, help_text='Percentage 0-100')),
                ('delivery_progress', models.IntegerField(default=0, help_text='Percentage 0-100')),
                ('last_websocket_update', models.DateTimeField(blank=True, null=True)),
                ('update_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delivery_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivery_orders', to=settings.AUTH_USER_MODEL)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='live_tracking', to='api.order')),
            ],
            options={
                'db_table': 'live_order_tracking',
            },
        ),
        migrations.CreateModel(
            name='GroupOrderParticipant',
            fields=[
                ('participant_id', models.AutoField(primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=100)),
                ('is_organizer', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_order_participations', to='api.customer')),
                ('group_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='api.grouporder')),
                ('order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_order_participation', to='api.order')),
            ],
            options={
                'db_table': 'group_order_participants',
            },
        ),
        migrations.CreateModel(
            name='DishReview',
            fields=[
                ('dish_review_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('photos', models.JSONField(blank=True, default=list)),
                ('taste_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('portion_size_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('helpful_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dish_reviews', to='api.customer')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.menuitem')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dish_reviews', to='api.order')),
            ],
            options={
                'db_table': 'dish_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DishRating',
            fields=[
                ('dish_rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('taste', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('portion_size', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_quick_rating', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dish_ratings', to='api.customer')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.menuitem')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dish_ratings', to='api.order')),
            ],
            options={
                'db_table': 'dish_ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('order_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='api.menuitem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='api.order')),
            ],
            options={
                'db_table': 'order_items',
                'ordering': ['order', 'order_item_id'],
            },
        ),
        migrations.CreateModel(
            name='OrderItemModifier',
            fields=[
                ('order_item_modifier_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('item_modifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_modifiers', to='api.itemmodifier')),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='api.orderitem')),
            ],
            options={
                'db_table': 'order_item_modifiers',
                'ordering': ['order_item', 'item_modifier'],
            },
        ),
        migrations.CreateModel(
            name='OrderTracking',
            fields=[
                ('tracking_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('preparing', 'Preparing'), ('ready', 'Ready for Pickup'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_history', to='api.order')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'order tracking',
                'db_table': 'order_tracking',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('stripe', 'Stripe'), ('cash', 'Cash on Delivery'), ('mobile_wallet', 'Mobile Wallet')], max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_gateway_response', models.JSONField(blank=True, null=True)),
                ('payment_initiated_at', models.DateTimeField(auto_now_add=True)),
                ('payment_completed_at', models.DateTimeField(blank=True, null=True)),
                ('payment_failed_at', models.DateTimeField(blank=True, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('refunded_at', models.DateTimeField(blank=True, null=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='api.order')),
            ],
            options={
                'db_table': 'payments',
                'ordering': ['-payment_initiated_at'],
            },
        ),
        migrations.CreateModel(
            name='PushNotificationDevice',
            fields=[
                ('device_id', models.AutoField(primary_key=True, serialize=False)),
                ('platform', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android'), ('web', 'Web')], max_length=10)),
                ('device_token', models.TextField(unique=True)),
                ('device_model', models.CharField(blank=True, max_length=100, null=True)),
                ('app_version', models.CharField(blank=True, max_length=20, null=True)),
                ('fcm_token', models.TextField(blank=True, null=True)),
                ('apns_token', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'push_notification_devices',
            },
        ),
        migrations.CreateModel(
            name='PushNotificationLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, default=dict)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.pushnotificationdevice')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_logs', to='api.notification')),
            ],
            options={
                'db_table': 'push_notification_logs',
            },
        ),
        migrations.CreateModel(
            name='RatingAggregate',
            fields=[
                ('aggregate_id', models.AutoField(primary_key=True, serialize=False)),
                ('content_type', models.CharField(max_length=20)),
                ('object_id', models.IntegerField()),
                ('total_ratings', models.IntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('rating_distribution', models.JSONField(default=dict)),
                ('average_food_quality', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('average_service_quality', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('average_ambiance', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('average_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('tag_frequencies', models.JSONField(default=dict)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'rating_aggregates',
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='rating_aggr_content_a65a73_idx')],
                'unique_together': {('content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='RealTimeInventory',
            fields=[
                ('inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('current_stock', models.IntegerField(default=0)),
                ('low_stock_threshold', models.IntegerField(default=10)),
                ('out_of_stock_threshold', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('auto_restock_enabled', models.BooleanField(default=False)),
                ('restock_quantity', models.IntegerField(default=0)),
                ('restock_threshold', models.IntegerField(default=5)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.branch')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.menuitem')),
            ],
            options={
                'db_table': 'real_time_inventory',
            },
        ),
        migrations.CreateModel(
            name='InventoryAlert',
            fields=[
                ('alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock'), ('restocked', 'Restocked')], max_length=20)),
                ('message', models.TextField()),
                ('previous_stock', models.IntegerField()),
                ('current_stock', models.IntegerField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='api.realtimeinventory')),
            ],
            options={
                'db_table': 'inventory_alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('referral_id', models.AutoField(primary_key=True, serialize=False)),
                ('referred_email', models.EmailField(max_length=254)),
                ('referral_code', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('referral_token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_made', to='api.customer')),
            ],
            options={
                'db_table': 'referrals',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('restaurant_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('story_description', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='restaurant_logos/')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='restaurant_banners/')),
                ('gallery_images', models.JSONField(blank=True, default=list)),
                ('amenities', models.JSONField(blank=True, default=list)),
                ('phone_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number.')])),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending Approval'), ('suspended', 'Suspended')], default='pending', max_length=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('reservation_enabled', models.BooleanField(default=False)),
                ('overall_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cuisines', models.ManyToManyField(blank=True, related_name='restaurants', to='api.cuisine')),
                ('owner', models.ForeignKey(limit_choices_to={'user_type': 'owner'}, on_delete=django.db.models.deletion.CASCADE, related_name='restaurants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'restaurants',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('recommendation_id', models.AutoField(primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('personalized', 'Personalized'), ('trending', 'Trending'), ('similar', 'Similar Items'), ('collaborative', 'Collaborative Filtering'), ('seasonal', 'Seasonal')], max_length=20)),
                ('scores', models.JSONField(blank=True, default=dict)),
                ('algorithm_metadata', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField()),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('recommended_menu_items', models.ManyToManyField(blank=True, to='api.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
                ('recommended_restaurants', models.ManyToManyField(blank=True, to='api.restaurant')),
            ],
            options={
                'db_table': 'recommendations',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderTemplate',
            fields=[
                ('template_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order_type', models.CharField(choices=[('delivery', 'Delivery'), ('pickup', 'Pickup'), ('dine_in', 'Dine-in')], default='delivery', max_length=20)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('items_configuration', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_templates', to='api.customer')),
                ('delivery_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.address')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_templates', to='api.restaurant')),
            ],
            options={
                'db_table': 'order_templates',
                'ordering': ['-usage_count', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.restaurant'),
        ),
        migrations.CreateModel(
            name='OperationalEfficiency',
            fields=[
                ('efficiency_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', max_length=10)),
                ('total_orders', models.IntegerField(default=0)),
                ('completed_orders', models.IntegerField(default=0)),
                ('cancelled_orders', models.IntegerField(default=0)),
                ('fulfillment_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('average_preparation_time', models.IntegerField(default=0)),
                ('average_delivery_time', models.IntegerField(default=0)),
                ('average_waiting_time', models.IntegerField(default=0)),
                ('on_time_delivery_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('orders_per_staff_hour', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('revenue_per_staff_hour', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('peak_hours', models.JSONField(default=dict)),
                ('busy_periods', models.JSONField(default=dict)),
                ('kitchen_utilization', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('delivery_utilization', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('order_accuracy_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('customer_satisfaction_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='efficiency_metrics', to='api.branch')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operational_metrics', to='api.restaurant')),
            ],
            options={
                'db_table': 'operational_efficiency',
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='restaurant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.restaurant'),
        ),
        migrations.AddField(
            model_name='multirestaurantloyaltyprogram',
            name='participating_restaurants',
            field=models.ManyToManyField(blank=True, help_text='Restaurants participating in this program (empty for all restaurants)', related_name='loyalty_programs', to='api.restaurant'),
        ),
        migrations.CreateModel(
            name='MenuItemPerformance',
            fields=[
                ('performance_id', models.AutoField(primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('quantity_sold', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('average_selling_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('profit_margin', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('popularity_rank', models.IntegerField(default=0)),
                ('growth_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('repeat_order_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('customer_rating_avg', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('ingredient_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('preparation_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('gross_profit', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_snapshots', to='api.menuitem')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_performance', to='api.restaurant')),
            ],
            options={
                'db_table': 'menu_item_performance',
            },
        ),
        migrations.AddField(
            model_name='menucategory',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_categories', to='api.restaurant'),
        ),
        migrations.AddField(
            model_name='grouporder',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_orders', to='api.restaurant'),
        ),
        migrations.CreateModel(
            name='FinancialReport',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('profit_loss', 'Profit & Loss'), ('cash_flow', 'Cash Flow'), ('balance_sheet', 'Balance Sheet'), ('sales_summary', 'Sales Summary')], max_length=20)),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('food_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('beverage_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('delivery_fee_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('other_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('cost_of_goods_sold', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('labor_costs', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('operating_expenses', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('delivery_costs', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('marketing_costs', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('gross_profit', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('operating_profit', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('net_profit', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('gross_margin', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('operating_margin', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('net_margin', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('return_on_investment', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('break_even_point', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('previous_period_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('revenue_growth', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('industry_benchmark', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('report_data', models.JSONField(default=dict)),
                ('generated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_reports', to='api.restaurant')),
            ],
            options={
                'db_table': 'financial_reports',
            },
        ),
        migrations.CreateModel(
            name='DiscountVoucher',
            fields=[
                ('voucher_id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_vouchers', to='api.restaurant')),
            ],
            options={
                'db_table': 'discount_vouchers',
            },
        ),
        migrations.CreateModel(
            name='DailySalesSnapshot',
            fields=[
                ('snapshot_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('orders_count', models.IntegerField(default=0)),
                ('revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('completed_orders', models.IntegerField(default=0)),
                ('cancelled_orders', models.IntegerField(default=0)),
                ('hourly_orders', models.JSONField(default=dict)),
                ('hourly_revenue', models.JSONField(default=dict)),
                ('daily_top_items', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_snapshots', to='api.restaurant')),
            ],
            options={
                'db_table': 'daily_sales_snapshots',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLifetimeValue',
            fields=[
                ('clv_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_order_date', models.DateTimeField()),
                ('last_order_date', models.DateTimeField()),
                ('total_orders', models.IntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('order_frequency_days', models.IntegerField(default=0)),
                ('predicted_clv', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('customer_segment', models.CharField(choices=[('high_value', 'High Value'), ('medium_value', 'Medium Value'), ('low_value', 'Low Value'), ('new', 'New Customer')], default='new', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('days_since_last_order', models.IntegerField(default=0)),
                ('churn_probability', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifetime_value', to='api.customer')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_metrics', to='api.restaurant')),
            ],
            options={
                'db_table': 'customer_lifetime_value',
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='favorite_restaurants',
            field=models.ManyToManyField(blank=True, related_name='favorited_by', to='api.restaurant'),
        ),
        migrations.CreateModel(
            name='ComparativeAnalytics',
            fields=[
                ('comparison_id', models.AutoField(primary_key=True, serialize=False)),
                ('comparison_type', models.CharField(choices=[('industry', 'Industry Benchmark'), ('similar_size', 'Similar Size Restaurants'), ('same_cuisine', 'Same Cuisine Type'), ('geographic', 'Geographic Area')], max_length=20)),
                ('period_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('revenue_comparison', models.JSONField(default=dict)),
                ('order_volume_comparison', models.JSONField(default=dict)),
                ('average_order_value_comparison', models.JSONField(default=dict)),
                ('customer_satisfaction_comparison', models.JSONField(default=dict)),
                ('market_share', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('competitive_position', models.CharField(choices=[('leader', 'Market Leader'), ('strong', 'Strong Competitor'), ('average', 'Average Performer'), ('weak', 'Weak Performer')], default='average', max_length=20)),
                ('growth_rate_comparison', models.JSONField(default=dict)),
                ('customer_acquisition_comparison', models.JSONField(default=dict)),
                ('strengths', models.JSONField(default=list)),
                ('weaknesses', models.JSONField(default=list)),
                ('opportunities', models.JSONField(default=list)),
                ('threats', models.JSONField(default=list)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparative_analytics', to='api.restaurant')),
            ],
            options={
                'db_table': 'comparative_analytics',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='restaurant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='api.restaurant'),
        ),
        migrations.AddField(
            model_name='bulkorder',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_orders', to='api.restaurant'),
        ),
        migrations.AddField(
            model_name='branch',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='api.restaurant'),
        ),
        migrations.CreateModel(
            name='RestaurantLoyaltySettings',
            fields=[
                ('settings_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_loyalty_enabled', models.BooleanField(default=True)),
                ('custom_points_per_dollar', models.DecimalField(blank=True, decimal_places=2, help_text='Leave empty to use program default rate', max_digits=5, null=True)),
                ('custom_signup_bonus_points', models.IntegerField(blank=True, null=True)),
                ('custom_referral_bonus_points', models.IntegerField(blank=True, null=True)),
                ('custom_tier_benefits', models.JSONField(blank=True, default=dict, help_text='JSON structure for custom tier benefits for this restaurant')),
                ('minimum_order_amount_for_points', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('allow_point_redemption', models.BooleanField(default=True)),
                ('allow_reward_redemption', models.BooleanField(default=True)),
                ('points_expiry_days', models.IntegerField(default=365, help_text='Days before points expire')),
                ('max_points_per_order', models.IntegerField(blank=True, help_text='Maximum points per order', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_settings', to='api.multirestaurantloyaltyprogram')),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_settings', to='api.restaurant')),
            ],
            options={
                'verbose_name_plural': 'restaurant loyalty settings',
                'db_table': 'restaurant_loyalty_settings',
            },
        ),
        migrations.CreateModel(
            name='RestaurantPerformanceMetrics',
            fields=[
                ('metrics_id', models.AutoField(primary_key=True, serialize=False)),
                ('lifetime_orders', models.IntegerField(default=0)),
                ('lifetime_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('today_orders', models.IntegerField(default=0)),
                ('today_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('this_week_orders', models.IntegerField(default=0)),
                ('this_week_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('this_month_orders', models.IntegerField(default=0)),
                ('this_month_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('order_completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('average_preparation_time', models.IntegerField(default=0)),
                ('customer_retention_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_performance_metrics',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantRating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('overall_rating', models.DecimalField(decimal_places=1, max_digits=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('food_quality', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('service_quality', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ambiance', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_quick_rating', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_ratings', to='api.customer')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.order')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantReview',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('overall_rating', models.DecimalField(decimal_places=1, max_digits=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('food_quality', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('service_quality', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ambiance', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('photos', models.JSONField(blank=True, default=list)),
                ('video_url', models.URLField(blank=True, null=True)),
                ('helpful_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('reported', 'Reported')], default='pending', max_length=10)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_owner_response_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_reviews', to='api.customer')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.order')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantReviewSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_approve_reviews', models.BooleanField(default=True)),
                ('allow_photo_reviews', models.BooleanField(default=True)),
                ('allow_video_reviews', models.BooleanField(default=True)),
                ('require_order_verification', models.BooleanField(default=True)),
                ('min_order_amount_for_review', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('notify_on_new_review', models.BooleanField(default=True)),
                ('notify_on_review_report', models.BooleanField(default=True)),
                ('auto_response_enabled', models.BooleanField(default=False)),
                ('auto_response_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review_settings', to='api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_review_settings',
            },
        ),
        migrations.CreateModel(
            name='RestaurantSalesReport',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_orders', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('completed_orders', models.IntegerField(default=0)),
                ('cancelled_orders', models.IntegerField(default=0)),
                ('new_customers', models.IntegerField(default=0)),
                ('returning_customers', models.IntegerField(default=0)),
                ('top_items', models.JSONField(default=dict)),
                ('popular_categories', models.JSONField(default=dict)),
                ('peak_hours', models.JSONField(default=dict)),
                ('average_preparation_time', models.IntegerField(default=0)),
                ('average_delivery_time', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_reports', to='api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_sales_reports',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantStaff',
            fields=[
                ('staff_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('manager', 'Manager'), ('chef', 'Chef'), ('cashier', 'Cashier'), ('waiter', 'Waiter'), ('delivery', 'Delivery Driver'), ('other', 'Other Staff')], max_length=20)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('hire_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('can_manage_orders', models.BooleanField(default=False)),
                ('can_manage_menu', models.BooleanField(default=False)),
                ('can_manage_staff', models.BooleanField(default=False)),
                ('can_view_reports', models.BooleanField(default=False)),
                ('shifts', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to='api.restaurant')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'restaurant_staff',
                'ordering': ['-hire_date'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpfulVote',
            fields=[
                ('vote_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_helpful', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to='api.customer')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='api.restaurantreview')),
            ],
            options={
                'db_table': 'review_helpful_votes',
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('spam', 'Spam or misleading'), ('inappropriate', 'Inappropriate content'), ('fake', 'Fake review'), ('harassment', 'Harassment or bullying'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('under_review', 'Under Review'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=15)),
                ('moderator_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='api.restaurantreview')),
            ],
            options={
                'db_table': 'review_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewResponse',
            fields=[
                ('response_id', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_responses', to=settings.AUTH_USER_MODEL)),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='api.restaurantreview')),
            ],
            options={
                'db_table': 'review_responses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('reward_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('reward_type', models.CharField(choices=[('discount', 'Discount'), ('free_item', 'Free Item'), ('free_delivery', 'Free Delivery'), ('voucher', 'Gift Voucher')], max_length=20)),
                ('points_required', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('redeemed_count', models.IntegerField(default=0)),
                ('min_tier_required', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_restaurants', models.ManyToManyField(blank=True, help_text='Restaurants where this reward can be used (empty for all)', related_name='applicable_rewards', to='api.restaurant')),
                ('free_menu_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.menuitem')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='api.multirestaurantloyaltyprogram')),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_rewards', to='api.restaurant')),
            ],
            options={
                'db_table': 'rewards',
                'ordering': ['points_required'],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('points', models.IntegerField(help_text='Positive for earned, negative for redeemed')),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('adjusted', 'Points Adjusted'), ('expired', 'Points Expired'), ('signup_bonus', 'Signup Bonus'), ('referral_bonus', 'Referral Bonus')], max_length=20)),
                ('reason', models.TextField(blank=True, null=True)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When these points will expire', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether these points are still active/valid')),
                ('customer_loyalty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to='api.customerloyalty')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_points_transactions', to='api.order')),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points_transactions', to='api.restaurant')),
                ('reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points_transactions', to='api.reward')),
            ],
            options={
                'db_table': 'points_transactions',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='RewardRedemption',
            fields=[
                ('redemption_id', models.AutoField(primary_key=True, serialize=False)),
                ('points_used', models.IntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('redemption_code', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('redeemed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('customer_loyalty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reward_redemptions', to='api.customerloyalty')),
                ('discount_voucher', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='redemption', to='api.discountvoucher')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reward_redemptions', to='api.restaurant')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='api.reward')),
            ],
            options={
                'db_table': 'reward_redemptions',
            },
        ),
        migrations.CreateModel(
            name='ScheduledOrder',
            fields=[
                ('schedule_id', models.AutoField(primary_key=True, serialize=False)),
                ('schedule_type', models.CharField(choices=[('once', 'One Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='once', max_length=20)),
                ('scheduled_for', models.DateTimeField()),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('recurrence_end', models.DateTimeField(blank=True, null=True)),
                ('recurrence_days', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('last_processed', models.DateTimeField(blank=True, null=True)),
                ('next_occurrence', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_orders', to='api.customer')),
                ('order_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_orders', to='api.ordertemplate')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_orders', to='api.restaurant')),
            ],
            options={
                'db_table': 'scheduled_orders',
                'ordering': ['scheduled_for'],
            },
        ),
        migrations.CreateModel(
            name='SimilarityMatrix',
            fields=[
                ('matrix_id', models.AutoField(primary_key=True, serialize=False)),
                ('matrix_type', models.CharField(max_length=50)),
                ('item_a_id', models.IntegerField()),
                ('item_b_id', models.IntegerField()),
                ('similarity_score', models.DecimalField(decimal_places=4, max_digits=5)),
                ('calculation_method', models.CharField(max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'similarity_matrix',
                'indexes': [models.Index(fields=['matrix_type', 'item_a_id'], name='similarity__matrix__128408_idx'), models.Index(fields=['matrix_type', 'item_b_id'], name='similarity__matrix__b7fe33_idx')],
                'unique_together': {('matrix_type', 'item_a_id', 'item_b_id')},
            },
        ),
        migrations.CreateModel(
            name='SpecialOffer',
            fields=[
                ('offer_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('offer_type', models.CharField(choices=[('percentage', 'Percentage Discount'), ('fixed', 'Fixed Amount Discount'), ('bogo', 'Buy One Get One'), ('combo', 'Combo Deal')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('image', models.ImageField(blank=True, null=True, upload_to='special_offers/')),
                ('min_order_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('valid_days', models.JSONField(blank=True, default=list, help_text="Leave empty for all days. Example: ['monday', 'tuesday']")),
                ('display_priority', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('max_usage', models.IntegerField(default=0, help_text='0 for unlimited')),
                ('max_usage_per_user', models.IntegerField(default=0)),
                ('current_usage', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_items', models.ManyToManyField(blank=True, related_name='special_offers', to='api.menuitem')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='special_offers', to='api.restaurant')),
            ],
            options={
                'db_table': 'special_offers',
                'ordering': ['-display_priority', '-valid_from', 'restaurant'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='applied_offers',
            field=models.ManyToManyField(blank=True, related_name='orders_used', through='api.OfferUsage', to='api.specialoffer'),
        ),
        migrations.AddField(
            model_name='offerusage',
            name='offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='api.specialoffer'),
        ),
        migrations.AddField(
            model_name='cart',
            name='applied_offers',
            field=models.ManyToManyField(blank=True, related_name='carts', to='api.specialoffer'),
        ),
        migrations.CreateModel(
            name='UserBehavior',
            fields=[
                ('behavior_id', models.AutoField(primary_key=True, serialize=False)),
                ('behavior_type', models.CharField(choices=[('view', 'View'), ('order', 'Order'), ('favorite', 'Favorite'), ('rating', 'Rating'), ('search', 'Search')], max_length=20)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.menuitem')),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.restaurant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behaviors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_behaviors',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('preference_id', models.AutoField(primary_key=True, serialize=False)),
                ('cuisine_scores', models.JSONField(blank=True, default=dict)),
                ('dietary_weights', models.JSONField(blank=True, default=dict)),
                ('price_preferences', models.JSONField(blank=True, default=dict)),
                ('preferred_locations', models.JSONField(blank=True, default=list)),
                ('restaurant_type_scores', models.JSONField(blank=True, default=dict)),
                ('avg_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('order_frequency_days', models.IntegerField(default=0)),
                ('preferred_order_times', models.JSONField(blank=True, default=dict)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='WebSocketConnection',
            fields=[
                ('connection_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('connection_type', models.CharField(choices=[('customer', 'Customer'), ('restaurant_staff', 'Restaurant Staff'), ('delivery', 'Delivery Personnel'), ('admin', 'Administrator')], max_length=20)),
                ('customer_group', models.CharField(blank=True, max_length=255, null=True)),
                ('restaurant_groups', models.JSONField(blank=True, default=list)),
                ('order_groups', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('disconnected_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='websocket_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'websocket_connections',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['social_auth_provider', 'social_auth_uid'], name='users_social__a85889_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitemmodifier',
            unique_together={('cart_item', 'item_modifier')},
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available'], name='menu_items_is_avai_013e6c_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['item_type'], name='menu_items_item_ty_272da6_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_featured'], name='menu_items_is_feat_1963a3_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['popularity_score'], name='menu_items_popular_092db9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'menu_item')},
        ),
        migrations.AlterUniqueTogether(
            name='menuitemmodifier',
            unique_together={('menu_item', 'modifier_group')},
        ),
        migrations.AddIndex(
            model_name='customerloyalty',
            index=models.Index(fields=['customer', 'program'], name='customer_lo_custome_75ccf4_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyalty',
            index=models.Index(fields=['tier'], name='customer_lo_tier_acd671_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyalty',
            index=models.Index(fields=['current_points'], name='customer_lo_current_7b98e8_idx'),
        ),
        migrations.AddIndex(
            model_name='liveordertracking',
            index=models.Index(fields=['order'], name='live_order__order_i_a8fbc0_idx'),
        ),
        migrations.AddIndex(
            model_name='liveordertracking',
            index=models.Index(fields=['delivery_person'], name='live_order__deliver_afbbe2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grouporderparticipant',
            unique_together={('group_order', 'customer')},
        ),
        migrations.AddIndex(
            model_name='dishreview',
            index=models.Index(fields=['menu_item', 'status'], name='dish_review_menu_it_8fe1a8_idx'),
        ),
        migrations.AddIndex(
            model_name='dishreview',
            index=models.Index(fields=['customer', 'created_at'], name='dish_review_custome_8f925a_idx'),
        ),
        migrations.AddIndex(
            model_name='dishreview',
            index=models.Index(fields=['rating'], name='dish_review_rating_01e7de_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dishreview',
            unique_together={('menu_item', 'customer', 'order')},
        ),
        migrations.AddIndex(
            model_name='dishrating',
            index=models.Index(fields=['menu_item', 'rating'], name='dish_rating_menu_it_5536d8_idx'),
        ),
        migrations.AddIndex(
            model_name='dishrating',
            index=models.Index(fields=['customer', 'created_at'], name='dish_rating_custome_217745_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dishrating',
            unique_together={('menu_item', 'customer', 'order')},
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_status'], name='payments_payment_bbdde9_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_id'], name='payments_transac_a1f824_idx'),
        ),
        migrations.AddIndex(
            model_name='pushnotificationdevice',
            index=models.Index(fields=['user', 'is_active'], name='push_notifi_user_id_aac935_idx'),
        ),
        migrations.AddIndex(
            model_name='pushnotificationdevice',
            index=models.Index(fields=['platform', 'is_active'], name='push_notifi_platfor_c5bd04_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pushnotificationdevice',
            unique_together={('user', 'device_token')},
        ),
        migrations.AddIndex(
            model_name='pushnotificationlog',
            index=models.Index(fields=['notification', 'success'], name='push_notifi_notific_629dfd_idx'),
        ),
        migrations.AddIndex(
            model_name='pushnotificationlog',
            index=models.Index(fields=['sent_at'], name='push_notifi_sent_at_f74809_idx'),
        ),
        migrations.AddIndex(
            model_name='realtimeinventory',
            index=models.Index(fields=['branch', 'current_stock'], name='real_time_i_branch__14c14c_idx'),
        ),
        migrations.AddIndex(
            model_name='realtimeinventory',
            index=models.Index(fields=['menu_item', 'current_stock'], name='real_time_i_menu_it_e2560d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='realtimeinventory',
            unique_together={('menu_item', 'branch')},
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['referral_token'], name='referrals_referra_42c0bb_idx'),
        ),
        migrations.AddIndex(
            model_name='referral',
            index=models.Index(fields=['referred_email', 'status'], name='referrals_referre_33f737_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurant',
            index=models.Index(fields=['status'], name='restaurants_status_7a5ebb_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurant',
            index=models.Index(fields=['overall_rating'], name='restaurants_overall_e961a0_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurant',
            index=models.Index(fields=['is_featured'], name='restaurants_is_feat_a07c01_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurant',
            index=models.Index(fields=['reservation_enabled'], name='restaurants_reserva_aef3d2_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user', 'recommendation_type'], name='recommendat_user_id_373e78_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user', 'is_active'], name='recommendat_user_id_02e815_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['expires_at'], name='recommendat_expires_f19a2e_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalefficiency',
            index=models.Index(fields=['restaurant', 'date'], name='operational_restaur_403e0d_idx'),
        ),
        migrations.AddIndex(
            model_name='operationalefficiency',
            index=models.Index(fields=['branch', 'date'], name='operational_branch__9da9e0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='operationalefficiency',
            unique_together={('restaurant', 'branch', 'date', 'period_type')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='notificatio_user_id_a4dd5c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['type', 'created_at'], name='notificatio_type_cb6908_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['order'], name='notificatio_order_i_25eb33_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['restaurant'], name='notificatio_restaur_13921e_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemperformance',
            index=models.Index(fields=['restaurant', 'start_date'], name='menu_item_p_restaur_133c8f_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemperformance',
            index=models.Index(fields=['menu_item', 'period_type'], name='menu_item_p_menu_it_c1ddcc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menuitemperformance',
            unique_together={('menu_item', 'period_type', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['is_featured'], name='menu_catego_is_feat_3a980b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menucategory',
            unique_together={('restaurant', 'name')},
        ),
        migrations.AddIndex(
            model_name='financialreport',
            index=models.Index(fields=['restaurant', 'report_type'], name='financial_r_restaur_cc6804_idx'),
        ),
        migrations.AddIndex(
            model_name='financialreport',
            index=models.Index(fields=['start_date', 'end_date'], name='financial_r_start_d_c34429_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='financialreport',
            unique_together={('restaurant', 'report_type', 'period_type', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='discountvoucher',
            index=models.Index(fields=['code'], name='discount_vo_code_700037_idx'),
        ),
        migrations.AddIndex(
            model_name='discountvoucher',
            index=models.Index(fields=['is_used', 'valid_until'], name='discount_vo_is_used_974cf2_idx'),
        ),
        migrations.AddIndex(
            model_name='dailysalessnapshot',
            index=models.Index(fields=['restaurant', 'date'], name='daily_sales_restaur_2e3a2b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailysalessnapshot',
            unique_together={('restaurant', 'date')},
        ),
        migrations.AddIndex(
            model_name='customerlifetimevalue',
            index=models.Index(fields=['restaurant', 'customer_segment'], name='customer_li_restaur_dd124b_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifetimevalue',
            index=models.Index(fields=['restaurant', 'is_active'], name='customer_li_restaur_aabc30_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customerlifetimevalue',
            unique_together={('customer', 'restaurant')},
        ),
        migrations.AddIndex(
            model_name='comparativeanalytics',
            index=models.Index(fields=['restaurant', 'comparison_type'], name='comparative_restaur_329294_idx'),
        ),
        migrations.AddIndex(
            model_name='comparativeanalytics',
            index=models.Index(fields=['start_date', 'end_date'], name='comparative_start_d_2f0835_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='restaurantloyaltysettings',
            unique_together={('restaurant', 'program')},
        ),
        migrations.AddIndex(
            model_name='restaurantrating',
            index=models.Index(fields=['restaurant', 'overall_rating'], name='restaurant__restaur_c8a84a_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantrating',
            index=models.Index(fields=['customer', 'created_at'], name='restaurant__custome_30c485_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantrating',
            index=models.Index(fields=['overall_rating'], name='restaurant__overall_04ced7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='restaurantrating',
            unique_together={('restaurant', 'customer', 'order')},
        ),
        migrations.AddIndex(
            model_name='restaurantreview',
            index=models.Index(fields=['restaurant', 'status'], name='restaurant__restaur_b03e11_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantreview',
            index=models.Index(fields=['customer', 'created_at'], name='restaurant__custome_599241_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantreview',
            index=models.Index(fields=['overall_rating'], name='restaurant__overall_81a800_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantreview',
            index=models.Index(fields=['created_at'], name='restaurant__created_119155_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='restaurantreview',
            unique_together={('restaurant', 'customer', 'order')},
        ),
        migrations.AddIndex(
            model_name='restaurantsalesreport',
            index=models.Index(fields=['restaurant', 'period_type'], name='restaurant__restaur_a8b8ff_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurantsalesreport',
            index=models.Index(fields=['start_date', 'end_date'], name='restaurant__start_d_55d577_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='restaurantsalesreport',
            unique_together={('restaurant', 'period_type', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='restaurantstaff',
            unique_together={('user', 'restaurant')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpfulvote',
            unique_together={('review', 'customer')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewreport',
            unique_together={('review', 'reporter')},
        ),
        migrations.AddIndex(
            model_name='reward',
            index=models.Index(fields=['is_active', 'valid_from', 'valid_until'], name='rewards_is_acti_25d8e2_idx'),
        ),
        migrations.AddIndex(
            model_name='reward',
            index=models.Index(fields=['min_tier_required'], name='rewards_min_tie_0b4d33_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['customer_loyalty', 'transaction_date'], name='points_tran_custome_73890e_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['order'], name='points_tran_order_i_58fb58_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['restaurant'], name='points_tran_restaur_9ec7ca_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardredemption',
            index=models.Index(fields=['redemption_code'], name='reward_rede_redempt_87aa71_idx'),
        ),
        migrations.AddIndex(
            model_name='rewardredemption',
            index=models.Index(fields=['status', 'expires_at'], name='reward_rede_status_4effd0_idx'),
        ),
        migrations.AddIndex(
            model_name='specialoffer',
            index=models.Index(fields=['is_active'], name='special_off_is_acti_9a2aad_idx'),
        ),
        migrations.AddIndex(
            model_name='specialoffer',
            index=models.Index(fields=['valid_from', 'valid_until'], name='special_off_valid_f_ba756b_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='orders_status_762191_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_placed_at'], name='orders_order_p_090145_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['customer', 'order_placed_at'], name='orders_custome_0b814f_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['restaurant', 'order_placed_at'], name='orders_restaur_3894a6_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['loyalty_points_awarded'], name='orders_loyalty_023c05_idx'),
        ),
        migrations.AddIndex(
            model_name='offerusage',
            index=models.Index(fields=['offer', 'customer'], name='offer_usage_offer_i_ed92bf_idx'),
        ),
        migrations.AddIndex(
            model_name='offerusage',
            index=models.Index(fields=['customer', 'applied_at'], name='offer_usage_custome_c6b811_idx'),
        ),
        migrations.AddIndex(
            model_name='offerusage',
            index=models.Index(fields=['offer', 'applied_at'], name='offer_usage_offer_i_f3fe76_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='offerusage',
            unique_together={('offer', 'order')},
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['user', 'behavior_type'], name='user_behavi_user_id_5b4a6a_idx'),
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['user', 'created_at'], name='user_behavi_user_id_9bb153_idx'),
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['behavior_type', 'created_at'], name='user_behavi_behavio_9c172e_idx'),
        ),
        migrations.AddIndex(
            model_name='websocketconnection',
            index=models.Index(fields=['user', 'is_active'], name='websocket_c_user_id_0bac24_idx'),
        ),
        migrations.AddIndex(
            model_name='websocketconnection',
            index=models.Index(fields=['is_active', 'last_activity'], name='websocket_c_is_acti_988c66_idx'),
        ),
    ]
