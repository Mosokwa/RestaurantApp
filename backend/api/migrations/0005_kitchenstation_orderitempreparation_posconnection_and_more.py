# Generated by Django 5.2.6 on 2025-10-14 20:43

import django.db.models.deletion
import encrypted_model_fields.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0004_remove_restaurant_restaurants_status_7a5ebb_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='KitchenStation',
            fields=[
                ('station_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('station_type', models.CharField(choices=[('grill', 'Grill Station'), ('fryer', 'Fryer Station'), ('salad', 'Salad Station'), ('pizza', 'Pizza Station'), ('dessert', 'Dessert Station'), ('beverage', 'Beverage Station'), ('expediter', 'Expediter Station'), ('general', 'General Kitchen')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('max_concurrent_items', models.IntegerField(default=5, help_text='Maximum items station can handle simultaneously')),
                ('avg_prep_time', models.IntegerField(default=15, help_text='Average preparation time in minutes')),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_categories', models.ManyToManyField(blank=True, related_name='kitchen_stations', to='api.menucategory')),
                ('assigned_staff', models.ManyToManyField(blank=True, related_name='kitchen_stations', to='api.restaurantstaff')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kitchen_stations', to='api.branch')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kitchen_stations', to='api.restaurant')),
            ],
            options={
                'db_table': 'kitchen_stations',
                'ordering': ['branch', 'station_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='OrderItemPreparation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preparation_status', models.CharField(choices=[('pending', 'Pending'), ('preparing', 'Preparing'), ('ready', 'Ready'), ('served', 'Served')], default='pending', max_length=20)),
                ('preparation_started_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion_at', models.DateTimeField(blank=True, null=True)),
                ('actual_completion_at', models.DateTimeField(blank=True, null=True)),
                ('quality_check_passed', models.BooleanField(blank=True, null=True)),
                ('quality_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_items', to='api.kitchenstation')),
                ('checked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.restaurantstaff')),
                ('order_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preparation_info', to='api.orderitem')),
            ],
            options={
                'db_table': 'order_item_preparation',
            },
        ),
        migrations.CreateModel(
            name='POSConnection',
            fields=[
                ('connection_id', models.AutoField(primary_key=True, serialize=False)),
                ('pos_type', models.CharField(choices=[('square', 'Square'), ('toast', 'Toast'), ('lightspeed', 'Lightspeed'), ('clover', 'Clover'), ('shopify', 'Shopify'), ('custom', 'Custom POS')], max_length=20)),
                ('connection_name', models.CharField(help_text='Friendly name for this connection', max_length=100)),
                ('api_key', encrypted_model_fields.fields.EncryptedCharField()),
                ('api_secret', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True)),
                ('access_token', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True)),
                ('refresh_token', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True)),
                ('base_url', models.URLField(blank=True, help_text='For custom POS systems', null=True)),
                ('merchant_id', models.CharField(blank=True, max_length=100, null=True)),
                ('location_id', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sync_status', models.CharField(choices=[('syncing', 'Syncing'), ('connected', 'Connected'), ('error', 'Error'), ('disconnected', 'Disconnected'), ('pending', 'Pending Setup')], default='pending', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_successful_sync', models.DateTimeField(blank=True, null=True)),
                ('auto_sync_menu', models.BooleanField(default=False)),
                ('auto_sync_inventory', models.BooleanField(default=False)),
                ('auto_sync_orders', models.BooleanField(default=True)),
                ('sync_frequency', models.IntegerField(default=15, help_text='Sync frequency in minutes')),
                ('last_error', models.TextField(blank=True, null=True)),
                ('error_count', models.IntegerField(default=0)),
                ('retry_count', models.IntegerField(default=0)),
                ('webhook_url', models.URLField(blank=True, null=True)),
                ('webhook_secret', models.CharField(blank=True, max_length=100, null=True)),
                ('webhook_registered', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pos_connections', to='api.restaurant')),
            ],
            options={
                'db_table': 'pos_connections',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='POSSyncLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('sync_type', models.CharField(choices=[('menu', 'Menu Sync'), ('inventory', 'Inventory Sync'), ('order', 'Order Sync'), ('customer', 'Customer Sync'), ('webhook', 'Webhook Processing')], max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('partial', 'Partial Success'), ('failed', 'Failed')], max_length=20)),
                ('items_processed', models.IntegerField(default=0)),
                ('items_created', models.IntegerField(default=0)),
                ('items_updated', models.IntegerField(default=0)),
                ('items_failed', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('stack_trace', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='api.posconnection')),
            ],
            options={
                'db_table': 'pos_sync_logs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TableLayout',
            fields=[
                ('layout_id', models.AutoField(primary_key=True, serialize=False)),
                ('layout_name', models.CharField(max_length=100)),
                ('layout_type', models.CharField(choices=[('main_dining', 'Main Dining'), ('outdoor', 'Outdoor'), ('private', 'Private Room'), ('bar', 'Bar Area'), ('custom', 'Custom')], default='main_dining', max_length=20)),
                ('layout_data', models.JSONField(default=dict, help_text='Table positioning and metadata')),
                ('qr_codes', models.JSONField(default=dict, help_text='Table number to QR code mapping')),
                ('qr_base_url', models.URLField(help_text='Base URL for QR codes')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='table_layouts', to='api.branch')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_layouts', to='api.restaurant')),
            ],
            options={
                'db_table': 'table_layouts',
                'ordering': ['branch', 'layout_name'],
            },
        ),
        migrations.CreateModel(
            name='OrderPOSInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pos_order_id', models.CharField(blank=True, help_text="POS system's order reference", max_length=100, null=True)),
                ('pos_location_id', models.CharField(blank=True, max_length=100, null=True)),
                ('pos_employee_id', models.CharField(blank=True, max_length=100, null=True)),
                ('table_number', models.CharField(blank=True, max_length=20, null=True)),
                ('station_assignments', models.JSONField(default=dict, help_text='Kitchen station assignments: {station_id: [item_ids]}')),
                ('preparation_started_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_ready_at', models.DateTimeField(blank=True, null=True)),
                ('actual_ready_at', models.DateTimeField(blank=True, null=True)),
                ('pos_sync_status', models.CharField(choices=[('pending', 'Pending Sync'), ('synced', 'Synced to POS'), ('failed', 'Sync Failed'), ('not_required', 'Not Required')], default='pending', max_length=20)),
                ('last_sync_attempt', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pos_info', to='api.order')),
                ('table_layout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='api.tablelayout')),
            ],
            options={
                'db_table': 'order_pos_info',
            },
        ),
        migrations.AddIndex(
            model_name='kitchenstation',
            index=models.Index(fields=['restaurant', 'is_available'], name='kitchen_sta_restaur_83107d_idx'),
        ),
        migrations.AddIndex(
            model_name='kitchenstation',
            index=models.Index(fields=['branch', 'station_type'], name='kitchen_sta_branch__e8b667_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitempreparation',
            index=models.Index(fields=['preparation_status'], name='order_item__prepara_9fecee_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitempreparation',
            index=models.Index(fields=['assigned_station', 'preparation_status'], name='order_item__assigne_18f55f_idx'),
        ),
        migrations.AddIndex(
            model_name='posconnection',
            index=models.Index(fields=['restaurant', 'is_active'], name='pos_connect_restaur_e9071f_idx'),
        ),
        migrations.AddIndex(
            model_name='posconnection',
            index=models.Index(fields=['sync_status', 'last_sync'], name='pos_connect_sync_st_6eefda_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='posconnection',
            unique_together={('restaurant', 'pos_type')},
        ),
        migrations.AddIndex(
            model_name='possynclog',
            index=models.Index(fields=['connection', 'sync_type'], name='pos_sync_lo_connect_d6c39c_idx'),
        ),
        migrations.AddIndex(
            model_name='possynclog',
            index=models.Index(fields=['started_at'], name='pos_sync_lo_started_cd57c6_idx'),
        ),
        migrations.AddIndex(
            model_name='tablelayout',
            index=models.Index(fields=['restaurant', 'is_active'], name='table_layou_restaur_c3cd4e_idx'),
        ),
        migrations.AddIndex(
            model_name='tablelayout',
            index=models.Index(fields=['branch', 'is_default'], name='table_layou_branch__a477f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tablelayout',
            unique_together={('restaurant', 'layout_name')},
        ),
        migrations.AddIndex(
            model_name='orderposinfo',
            index=models.Index(fields=['pos_order_id'], name='order_pos_i_pos_ord_dcc1bd_idx'),
        ),
        migrations.AddIndex(
            model_name='orderposinfo',
            index=models.Index(fields=['pos_sync_status'], name='order_pos_i_pos_syn_2fd06e_idx'),
        ),
        migrations.AddIndex(
            model_name='orderposinfo',
            index=models.Index(fields=['table_number'], name='order_pos_i_table_n_6a4723_idx'),
        ),
    ]
